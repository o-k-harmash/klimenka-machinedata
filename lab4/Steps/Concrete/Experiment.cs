public class Experiment : IUnitOfCalculation<double[,]>
{
    // === üîß –ò—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Ö –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
    private static readonly int a = 2;
    private static readonly int b = a;
    private static readonly int c = a;

    // === üìê –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏ (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ a, b, c)
    private static readonly double a0 = 1 + c;
    private static readonly double a1 = 0.5 + (b - c) / 5.0;
    private static readonly double a2 = 0.1 + (a + b + c) / 5.0;
    private static readonly double a3 = 0.3 + (1 + c) * (1 + b) / 10.0;
    private static readonly double a4 = 0.3 + (a - b + c) / 5.0;

    // === üìä –î–∏—Å–ø–µ—Ä—Å–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à—É–º–∞ –≤ y)
    private static readonly double dispersion = (2.0 + a) / (5 + b + c);

    // === üìè –î–∏–∞–ø–∞–∑–æ–Ω—ã —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (min / max), —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏–∑ a, b, c
    public static readonly double x1min = (a + b + 2 * c) / 2;
    public static readonly double x2min = (a + 1) * (b + 2) / (c + 1);
    public static readonly double x3min = a + 3 * b + c;

    public static readonly double x1max = 1.3 * x1min;
    public static readonly double x2max = 1.4 * x2min;
    public static readonly double x3max = 1.5 * x3min;

    // === üìã –§–∏–∑–∏—á–µ—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (x1, x2, x3)
    public static readonly double[,] factorValuesMatrix =
    {
        {  x1min, x2min, x3min },
        {  x1min, x2min, x3max },
        {  x1min, x2max, x3min },
        {  x1min, x2max, x3max },
        {  x1max, x2min, x3min },
        {  x1max, x2min, x3max },
        {  x1max, x2max, x3min },
        {  x1max, x2max, x3max },
    };

    // === üß™ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ [-1; 1] –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    public static readonly int[,] normalizeFactorValuesMatrix =
    {
        { -1, -1, -1 },
        { -1, -1,  1 },
        { -1,  1, -1 },
        { -1,  1,  1 },
        {  1, -1, -1 },
        {  1, -1,  1 },
        {  1,  1, -1 },
        {  1,  1,  1 },
    };

    public static readonly double[,] extensebleNormalizeFactorValuesMatrix =
    {
        { 1, -1, -1, -1 },
        { 1, -1, -1,  1 },
        { 1, -1,  1, -1 },
        { 1, -1,  1,  1 },
        { 1,  1, -1, -1 },
        { 1,  1, -1,  1 },
        { 1,  1,  1, -1 },
        { 1,  1,  1,  1 },
    };

    // === ‚öôÔ∏è –ú–æ–¥–µ–ª—å —Å–∏—Å—Ç–µ–º—ã (—Ä–∞—Å—á–µ—Ç yÃÇ –ø–æ —Ñ–∞–∫—Ç–æ—Ä–∞–º)
    private static double makeExperiment(double x1, double x2, double x3)
    {
        return
            -1 * x3 * x1 * x2 * a3 * a4 +
            0.76 * a1 * x1 * a2 * x2 +
            1.83 * x3 * x1 * a3 * a4 -
            x3 * x2 * a3 +
            0.76 * a1 * x1 +
            1.83 * x3 * a3 +
            a0 +
            generateRandomValue();
    }

    // === üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ y (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    private static double generateRandomValue()
    {
        var random = new Random();
        double mean = 0;
        double stdDev = Math.Sqrt(dispersion);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ë–æ–∫—Å–∞-–ú—é–ª–ª–µ—Ä–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        double u1 = 1.0 - random.NextDouble(); // [0,1)
        double u2 = 1.0 - random.NextDouble();
        double randStdNormal = Math.Sqrt(-2.0 * Math.Log(u1)) * Math.Sin(2.0 * Math.PI * u2);

        return mean + stdDev * randStdNormal;
    }

    // === üîÅ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    public static int _exp_amount = 8; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (2^3)
    public static int _exp_repeat = 5; // –ü–æ–≤—Ç–æ—Ä—ã –Ω–∞ –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É
    private double[,] _result = null!;  // –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –º–∞—Ç—Ä–∏—Ü–∞

    // === üìå –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç (–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–º–∏—Ç–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º)
    public double[,] Calculate(params object[] args)
    {
        int combinationsCount = factorValuesMatrix.GetLength(0); // = 8
        _result = new double[combinationsCount, _exp_repeat]; // 8 —Å—Ç—Ä–æ–∫, 5 —Å—Ç–æ–ª–±—Ü–æ–≤

        for (int i = 0; i < combinationsCount; i++)
        {
            var x1 = factorValuesMatrix[i, 0];
            var x2 = factorValuesMatrix[i, 1];
            var x3 = factorValuesMatrix[i, 2];

            for (int j = 0; j < _exp_repeat; j++)
            {
                _result[i, j] = makeExperiment(x1, x2, x3); // <-- —Ä–∞—Å—á—ë—Ç y
            }
        }

        return _result;
    }

    // === üñ®Ô∏è –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ (–º–∞—Ç—Ä–∏—Ü–∞ Y)
    public void Report()
    {
        Console.WriteLine("üß™ –ü–æ–≤–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä–Ω–∏–π –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç (–ü–§–ï)");
        Console.WriteLine($"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å –Ω–∞ —Ç–æ—á–∫—É: {_exp_repeat}\n");

        Console.WriteLine("üîç –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É:");
        Console.WriteLine($"a = {a}, b = {b}, c = {c}");
        Console.WriteLine($"x1min = {x1min}, x1max = {x1max}");
        Console.WriteLine($"x2min = {x2min}, x2max = {x2max}");
        Console.WriteLine($"x3min = {x3min}, x3max = {x3max}\n");
        Console.WriteLine($"–î–∏—Å–ø–µ—Ä—Å—ñ—è: {dispersion:F4}");
        Console.WriteLine($"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –º–æ–¥–µ–ª—ñ: a0 = {a0:F4}, a1 = {a1:F4}, a2 = {a2:F4}, a3 = {a3:F4}, a4 = {a4:F4}\n");

        // 1. –í—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π Y –ø–æ –≤—Å–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º
        Console.WriteLine("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É (Y):");
        for (int i = 0; i < _exp_amount; i++)
        {
            Console.Write($"–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è {i + 1}: ");
            for (int j = 0; j < _exp_repeat; j++)
            {
                Console.Write($"{_result[i, j]:F4} ");
            }
            Console.WriteLine();
        }
    }
}

