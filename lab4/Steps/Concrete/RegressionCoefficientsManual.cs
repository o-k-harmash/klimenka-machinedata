
public class RegressionCoefficientsManual : IUnitOfCalculation<double[]>
{
    private double[] _result = null!;

    public double[] Calculate(params object[] args)
    {
        //–≤–µ–∫—Ç–æ—Ä–∞ –∏ –º–∞—Ç—Ä–∏—Ü—ã –º–µ—Ç–æ–¥—ã —Ç–æ–ª—å–∫–æ –≤ 1 –º–µ—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—é–¥–∞
        var exp_average_results = new Vector<double>((double[])args[0]);
        var x_matrix = new Matrix<double>(Experiment.extensebleNormalizeFactorValuesMatrix);

        var xt = ~x_matrix;
        var xtx = xt * x_matrix;
        //XT*X ‚Üí [m x m]


        // –í–µ–∫—Ç–æ—Ä XT * y ‚Üí [m]
        var xty = xt * exp_average_results;

        //(XT*X)^-1 ‚Üí [m x m]
        var xtxInv = !xtx;

        _result = (xtxInv * xty).elements;
        return _result;
    }

    public void Report()
    {
        Console.WriteLine("\nüìê –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–≥—Ä–µ—Å—ñ—ó:");
        for (int i = 0; i < _result.Length; i++)
        {
            Console.WriteLine($"b{i} = {_result[i]:F4}");
        }
    }
}

